#include <IotWebServer.h> 
#include <LiquidCrystal_I2C.h> 
#include <TinyGPS++.h> 
 
const char *Wifi_AP_name = "ESP Server"; String apikey = "kL3ttFJyjNIx"; // insert the apikey here const int MPU_addr = 0x68; int16_t AcX, AcY, AcZ; int IN[] = {25, 26, 27, 13}; int uart1[] = {19, 18}; //(Tx,Rx) //GPS int uart2[] = {17, 16}; //(Tx,Rx) //GSM int TRIG_PIN = 33; int ECHO_PIN = 32; int limitswitch_pin = 36; int vib_pin = 36; int thermPin = 34; 
 
int button = 14; int buzzer = 23; 
 
float alcoholLevel, temp; bool limitswitch = 0; 
bool vibration = 0; 
String buttonstat = "0000"; 
LiquidCrystal_I2C lcd(0x27, 16, 2); String pinput; double lat, longi; TinyGPSPlus gps; int distance; void setup() 
{ 
  Serial.begin(9600); 
  Serial1.begin(9600, SERIAL_8N1, uart1[1], uart1[0]); // GPS 
  Serial2.begin(9600, SERIAL_8N1, uart2[1], uart2[0]); // GSM 
  Serial.setTimeout(20); 
  Serial1.setTimeout(50); 
  Serial2.setTimeout(20); 
  Serial.println("Initializing MPU-6050..."); 
  Wire.beginTransmission(MPU_addr); 
  Wire.write(0x6B); // PWR_MGMT_1 register 
  Wire.write(0x00); // Set to zero (wakes up the MPU-6050)   Wire.endTransmission(true); 
  lcd.init();   lcd.init();   lcd.backlight();   lcd.setCursor(0, 0);   lcd.print("Vehicle Accident");   lcd.setCursor(0, 1);   lcd.print("Detection");   pinMode(button, INPUT);   pinMode(buzzer, OUTPUT);   pinMode(limitswitch_pin, INPUT);   pinMode(vib_pin, INPUT);   pinMode(TRIG_PIN, OUTPUT);   pinMode(ECHO_PIN, INPUT);   pinMode(IN[0], OUTPUT);   pinMode(IN[1], OUTPUT);   pinMode(IN[2], OUTPUT);   pinMode(IN[3], OUTPUT);   delay(3000);   lcd.clear();   lcd.setCursor(0, 0);   lcd.print("Initialising");   Serial.println("Initialising"); 
  set_wifiAP_name(Wifi_AP_name);   set_update_timeout(2000);   delay(1000);   if (digitalRead(button)) 
  { 
    lcd.setCursor(0, 1);     lcd.print("Access Point Mode");     Serial.println("AP Mode");     startAP(); 
  } 
  else 
  { 
lcd.clear(); lcd.setCursor(0, 0);     lcd.print("Wifi");     lcd.setCursor(0, 1);     lcd.print("Not Connected");     Serial.println("Normal Mode");     startWiFi();     lcd.clear();     lcd.setCursor(0, 0);     lcd.print("Wifi");     lcd.setCursor(0, 1);     lcd.print("Connected"); 
  } 
} 
 
void loop() 
{ 
  while (Serial1.available() > 0)     if (gps.encode(Serial1.read())) 
    { 
      lat = gps.location.lat();       longi = gps.location.lng(); 
    } 
  distance = get_distance(TRIG_PIN, ECHO_PIN);   limitswitch = !digitalRead(limitswitch_pin);   vibration = !digitalRead(vib_pin);   getacceldata();   readTemperature(); 
  Serial.println((String) "Alcohol:" + alcoholLevel + " Seat Belt:" + limitswitch + " Distance:" + distance + " Temprature:" + temp + " Vibration:" + vibration + " X:" + AcX);   buttonstat = updateSensor(apikey, "", distance, limitswitch, temp, vibration, AcX, AcY, AcZ); 
  if (distance < 10) 
  { 
    digitalWrite(buzzer, LOW);     analogWrite(IN[0], 50);     analogWrite(IN[1], 50);     analogWrite(IN[2], 50);     analogWrite(IN[3], 50);     delay(5000);     rover_control("0000");     delay(5000); 
  } 
  else 
  { 
 
    digitalWrite(buzzer, HIGH); 
  } 
  if (limitswitch == 1 && vibration == 1) 
  { 
    String alert = "Accident Detected Emergency Assistance required at " + getGoogleMapsLink();     buttonstat = updateSensor_now(apikey, alert, distance, limitswitch, temp);         Serial.println(alert);     analogWrite(IN[0], 50);     analogWrite(IN[1], 50);     analogWrite(IN[2], 50);     analogWrite(IN[3], 50);     delay(5000); rover_control("0000"); delay(5000); 
  } 
  if (digitalRead(button)) 
  { 
    delay(1000);     if (digitalRead(button)) 
    { 
      String alert = "Accident Detected Emergency Assistance required at " + getGoogleMapsLink();       buttonstat = updateSensor_now(apikey, alert, distance, limitswitch, temp);       Serial.println(alert);       analogWrite(IN[0], 50);       analogWrite(IN[1], 50);       analogWrite(IN[2], 50);       analogWrite(IN[3], 50);       delay(5000);       rover_control("0000");       delay(5000); 
    } 
  } 
  if (AcX > 20000) 
  { 
    String alert = "Accident Detected Emergency Assistance required at " + getGoogleMapsLink();     buttonstat = updateSensor_now(apikey, alert, distance, limitswitch, temp);     Serial.println(alert);     analogWrite(IN[0], 50);     analogWrite(IN[1], 50);     analogWrite(IN[2], 50); analogWrite(IN[3], 50); delay(5000); 
rover_control("0000"); delay(5000); 
  } 
  rover_control(buttonstat);   lcd.clear();   lcd.setCursor(0, 0);   lcd.print("Limit:");   lcd.print(limitswitch);   lcd.setCursor(8, 0);   lcd.print("Vib:");   lcd.print(vibration);   lcd.setCursor(0, 1);   lcd.print("Dist:");   lcd.print(distance);   lcd.setCursor(8, 1);   lcd.print("Temp:");   lcd.print(temp);   checkwificonnection();   delay(1000); 
} 
 
void rover_control(String buttonstat) 
{ 
  // lcd.clear();   if (buttonstat[0] == '1') 
{ 
digitalWrite(IN[0], HIGH); digitalWrite(IN[1], LOW); digitalWrite(IN[2], HIGH); digitalWrite(IN[3], LOW); 
    // lcd.setCursor(0, 0); 
    // lcd.print("Vehicle Start"); 
    Serial.println("Forward"); 
  } 
  else if (buttonstat[1] == '1') 
  { 
    digitalWrite(IN[0], LOW);     digitalWrite(IN[1], HIGH);     digitalWrite(IN[2], LOW);     digitalWrite(IN[3], HIGH);     // lcd.setCursor(0, 0); 
    // lcd.print("Backward"); 
    Serial.println("Backward"); 
  } 
  else if (buttonstat[2] == '1') 
  { 
    digitalWrite(IN[0], LOW);     digitalWrite(IN[1], HIGH);     digitalWrite(IN[2], HIGH);     digitalWrite(IN[3], LOW);     // lcd.setCursor(0, 0);     // lcd.print("LEFT"); 
    Serial.println("LEFT"); 
} 
else if (buttonstat[3] == '1') 
{ 
digitalWrite(IN[0], HIGH); digitalWrite(IN[1], LOW);     digitalWrite(IN[2], LOW);     digitalWrite(IN[3], HIGH);     // lcd.setCursor(0, 0); 
    // lcd.print("RIGHT"); 
    Serial.println("RIGHT"); 
  } 
  else 
  { 
    digitalWrite(IN[0], LOW);     digitalWrite(IN[1], LOW);     digitalWrite(IN[2], LOW);     digitalWrite(IN[3], LOW);     // lcd.setCursor(0, 0); 
    // lcd.print("STOP"); 
  } 
} 
 
void readTemperature() 
{ 
  // Read the raw analog value from the thermistor   const float R1 = 10000.0; // 10k resistor 
 
  // Define the values for the Steinhart-Hart equation const float A = 0.001129148; const float B = 0.000234125; const float C = 0.0000000876741; 
 
  int rawValue = analogRead(thermPin);   float voltage = rawValue * (3.3 / 4095.0); // 3.3V is ESP32 ADC reference voltage   float resistance = R1 / ((3.3 / voltage) - 1.0);   float kelvinTemp = 1.0 / (A + B * log(resistance) + C * pow(log(resistance), 3));   temp = kelvinTemp - 273.15; 
} 
void sendAlert(String alertMessage) 
{ 
  Serial2.println("AT+CMGF=1"); // Set SMS mode to text   delay(1000); 
  Serial2.print("AT+CMGS=\"+918590697161\"\r"); // Replace with your emergency contact number   delay(1000); 
  Serial2.print(alertMessage); 
  Serial2.write(0x1A); 
  Serial.println("Sending sms");   delay(1000); 
} 
int get_distance(int C_TRIG_PIN, int C_ECHO_PIN) 
{ 
  long duration;   int distance;   digitalWrite(C_TRIG_PIN, LOW);   delayMicroseconds(2);   digitalWrite(C_TRIG_PIN, HIGH); delayMicroseconds(10); digitalWrite(C_TRIG_PIN, LOW); duration = pulseIn(C_ECHO_PIN, HIGH, 30000); // Timeout in microseconds (30ms = ~5m max distance)   if (duration != 0) 
  { 
    distance = (duration * 0.0343) / 2;     return distance; 
  } 
  else 
  { 
    return 0; 
  } 
} 
String getGoogleMapsLink() 
{ 
  String link = "https://maps.google.com/maps?q="; 
  link += (String)lat;   link += ",";   link += (String)longi; 
 
  // String link = "https://maps.google.com/maps?q=8.492571,76.947372";   link = "<a href=" + link + ">" + link + "</a>";   return link; 
} 
void getacceldata() 
{ 
  Wire.beginTransmission(MPU_addr); 
  Wire.write(0x3B); // Starting with register 0x3B (ACCEL_XOUT_H) 
Wire.endTransmission(false); 
Wire.requestFrom(MPU_addr, 14, true); // Request a total of 14 registers 
AcX = Wire.read() << 8 | Wire.read(); // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)   AcY = Wire.read() << 8 | Wire.read(); // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L) 
  AcZ = Wire.read() << 8 | Wire.read(); // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L) 
} 
